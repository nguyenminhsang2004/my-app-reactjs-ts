{"ast":null,"code":"import { call, delay, fork, put, take } from '@redux-saga/core/effects';\nimport authApi from 'api/authApi';\nimport { push } from 'connected-react-router';\nimport { toast } from 'react-toastify';\nimport { authActions } from './authSlice';\n\nfunction* handleLogin(payload) {\n  try {\n    const data = yield call(authApi.login, payload);\n\n    if (data.success) {\n      yield put(authActions.loginSuccess(data.content.user));\n      localStorage.setItem('access_token_value', data.content.accessToken);\n      localStorage.setItem('user_login', data.content.user);\n      yield put(push('/home/dashboard'));\n    } else {\n      toast.error(data.content.message);\n      yield put(authActions.loginFailed(data.content.message));\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(authActions.loginFailed('Login failed.'));\n  }\n}\n\nfunction* handleLogout() {\n  yield delay(2000);\n  localStorage.removeItem('access_token_value');\n  yield put(push('/login'));\n}\n\nfunction* handleRegister(payload) {\n  try {\n    const data = yield call(authApi.register, payload);\n\n    if (data.success === true) {\n      yield put(authActions.registerSuccess(data.content.user));\n      localStorage.setItem('access_token_value', data.content.accessToken);\n      yield put(push('/home/dashboard'));\n    } else {\n      toast.error(data.content.message);\n      yield put(authActions.registerFailed(data.content.message));\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(authActions.registerFailed('Register failed.'));\n  }\n}\n\nfunction* watchLoginFlow() {\n  while (true) {\n    if (!Boolean(localStorage.getItem('access_token_value'))) {\n      const action = yield take([authActions.login.type, authActions.register.type]);\n\n      if (action.type === authActions.login.type) {\n        yield fork(handleLogin, action.payload);\n      } else {\n        yield fork(handleRegister, action.payload);\n      }\n    }\n\n    yield take([authActions.logout.type, authActions.loginFailed.type, authActions.registerFailed]);\n    yield call(handleLogout);\n  }\n}\n\nexport default function* authSaga() {\n  yield fork(watchLoginFlow);\n}","map":{"version":3,"sources":["D:/REACTJS/APP/client/src/features/auth/authSaga.ts"],"names":["call","delay","fork","put","take","authApi","push","toast","authActions","handleLogin","payload","data","login","success","loginSuccess","content","user","localStorage","setItem","accessToken","error","message","loginFailed","console","log","handleLogout","removeItem","handleRegister","register","registerSuccess","registerFailed","watchLoginFlow","Boolean","getItem","action","type","logout","authSaga"],"mappings":"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","sourcesContent":["import { call, delay, fork, put, take } from '@redux-saga/core/effects';\r\nimport { PayloadAction } from '@reduxjs/toolkit';\r\nimport authApi from 'api/authApi';\r\nimport { push } from 'connected-react-router';\r\nimport { Auth, LoginPayLoad, User } from 'models';\r\nimport { toast } from 'react-toastify';\r\nimport { authActions } from './authSlice';\r\n\r\nfunction* handleLogin(payload: LoginPayLoad){\r\n    try {\r\n        const data: Auth = yield call(authApi.login, payload);\r\n        if(data.success){\r\n            yield put(authActions.loginSuccess(data.content.user));\r\n            localStorage.setItem('access_token_value', data.content.accessToken);\r\n            localStorage.setItem('user_login', data.content.user)\r\n            yield put(push('/home/dashboard'));\r\n        }\r\n        else{\r\n            toast.error(data.content.message);\r\n            yield put(authActions.loginFailed(data.content.message));\r\n        }\r\n       \r\n    } catch (error) {\r\n        console.log(error);\r\n        yield put(authActions.loginFailed('Login failed.'));\r\n    }\r\n}\r\n\r\nfunction* handleLogout(){\r\n    yield delay(2000);\r\n    localStorage.removeItem('access_token_value');\r\n    yield put(push('/login'));\r\n}\r\n\r\nfunction* handleRegister(payload: User){\r\n    try {\r\n        const data: Auth = yield call(authApi.register, payload);\r\n        if(data.success === true){\r\n            yield put(authActions.registerSuccess(data.content.user));\r\n            localStorage.setItem('access_token_value', data.content.accessToken);\r\n            yield put(push('/home/dashboard'));\r\n        }\r\n        else{\r\n            toast.error(data.content.message);\r\n            yield put(authActions.registerFailed(data.content.message));\r\n            \r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n        yield put(authActions.registerFailed('Register failed.'));\r\n    }\r\n    \r\n}\r\n\r\nfunction* watchLoginFlow(){\r\n    while(true){\r\n        if(!Boolean(localStorage.getItem('access_token_value'))){\r\n            const action: PayloadAction<any> = yield take([authActions.login.type,authActions.register.type]);\r\n            if(action.type === authActions.login.type){\r\n                yield fork(handleLogin, action.payload);\r\n            }\r\n            else{\r\n                yield fork(handleRegister, action.payload);\r\n            }   \r\n        }\r\n        yield take([authActions.logout.type,authActions.loginFailed.type,authActions.registerFailed]);\r\n        yield call(handleLogout);\r\n    }\r\n}\r\n\r\nexport default function* authSaga(){\r\n    yield fork(watchLoginFlow);\r\n}"]},"metadata":{},"sourceType":"module"}