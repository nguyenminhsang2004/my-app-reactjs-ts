{"ast":null,"code":"import axios from 'axios';\nimport queryString from 'query-string';\nconst axiosClient = axios.create({\n  baseURL: 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosClient.interceptors.response.use(function (response) {\n  return response.data;\n}, function (error) {\n  return Promise.reject(error);\n});\nexport default axiosClient;","map":{"version":3,"sources":["D:/REACTJS/APP/client/src/api/axiosClient.ts"],"names":["axios","queryString","axiosClient","create","baseURL","headers","paramsSerializer","params","stringify","interceptors","request","use","config","error","Promise","reject","response","data"],"mappings":"AAAA,OAAOA,KAAP,MAAyD,OAAzD;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAE,uBADsB;AAE/BC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFsB;AAK/BC,EAAAA,gBAAgB,EAAGC,MAAD,IAAYN,WAAW,CAACO,SAAZ,CAAsBD,MAAtB;AALC,CAAb,CAApB;AAQAL,WAAW,CAACO,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CACE,UAAUC,MAAV,EAAsC;AACpC,SAAOA,MAAP;AACD,CAHH,EAIE,UAAUC,KAAV,EAAiB;AACf,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CANH;AASAX,WAAW,CAACO,YAAZ,CAAyBO,QAAzB,CAAkCL,GAAlC,CACE,UAAUK,QAAV,EAAmC;AACjC,SAAOA,QAAQ,CAACC,IAAhB;AACD,CAHH,EAIE,UAAUJ,KAAV,EAAiB;AACf,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CANH;AASA,eAAeX,WAAf","sourcesContent":["import axios, { AxiosRequestConfig, AxiosResponse } from 'axios'\r\nimport queryString from 'query-string'\r\n\r\nconst axiosClient = axios.create({\r\n  baseURL: 'http://localhost:5000',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n  paramsSerializer: (params) => queryString.stringify(params),\r\n})\r\n\r\naxiosClient.interceptors.request.use(\r\n  function (config: AxiosRequestConfig) {\r\n    return config\r\n  },\r\n  function (error) {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\naxiosClient.interceptors.response.use(\r\n  function (response: AxiosResponse) {\r\n    return response.data\r\n  },\r\n  function (error) {\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default axiosClient\r\n"]},"metadata":{},"sourceType":"module"}