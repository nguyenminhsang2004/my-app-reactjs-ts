{"ast":null,"code":"import createSagaMiddleware from '@redux-saga/core';\nimport { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport authReducer from 'features/auth/authSlice';\nimport dashboardReducer from 'features/dashboard/dashboardSlice';\nimport postReducer from 'features/posts/postSlice';\nimport { history } from 'utils';\nimport rootSaga from './rootSaga';\nconst rootReducer = combineReducers({\n  router: connectRouter(history),\n  auth: authReducer,\n  dashboard: dashboardReducer,\n  post: postReducer,\n  category: category\n});\nconst sagaMiddleware = createSagaMiddleware();\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(sagaMiddleware, routerMiddleware(history))\n});\nsagaMiddleware.run(rootSaga);","map":{"version":3,"sources":["D:/REACTJS/App/client/src/app/store.ts"],"names":["createSagaMiddleware","combineReducers","configureStore","connectRouter","routerMiddleware","authReducer","dashboardReducer","postReducer","history","rootSaga","rootReducer","router","auth","dashboard","post","category","sagaMiddleware","store","reducer","middleware","getDefaultMiddleware","concat","run"],"mappings":"AAAA,OAAOA,oBAAP,MAAiC,kBAAjC;AACA,SAAiBC,eAAjB,EAAkCC,cAAlC,QAAqE,kBAArE;AACA,SAASC,aAAT,EAAwBC,gBAAxB,QAAgD,wBAAhD;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,gBAAP,MAA6B,mCAA7B;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,WAAW,GAAGT,eAAe,CAAC;AAClCU,EAAAA,MAAM,EAAER,aAAa,CAACK,OAAD,CADa;AAElCI,EAAAA,IAAI,EAAEP,WAF4B;AAGlCQ,EAAAA,SAAS,EAAEP,gBAHuB;AAIlCQ,EAAAA,IAAI,EAAEP,WAJ4B;AAKlCQ,EAAAA,QAAQ,EAAEA;AALwB,CAAD,CAAnC;AAQA,MAAMC,cAAc,GAAGhB,oBAAoB,EAA3C;AAEA,OAAO,MAAMiB,KAAK,GAAGf,cAAc,CAAC;AAClCgB,EAAAA,OAAO,EAAER,WADyB;AAElCS,EAAAA,UAAU,EAAGC,oBAAD,IAA0BA,oBAAoB,GAAGC,MAAvB,CAA8BL,cAA9B,EAA8CZ,gBAAgB,CAACI,OAAD,CAA9D;AAFJ,CAAD,CAA5B;AAKPQ,cAAc,CAACM,GAAf,CAAmBb,QAAnB","sourcesContent":["import createSagaMiddleware from '@redux-saga/core';\nimport { Action, combineReducers, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport authReducer from 'features/auth/authSlice';\nimport dashboardReducer from 'features/dashboard/dashboardSlice';\nimport postReducer from 'features/posts/postSlice';\nimport { history } from 'utils';\nimport rootSaga from './rootSaga';\n\nconst rootReducer = combineReducers({\n  router: connectRouter(history),\n  auth: authReducer,\n  dashboard: dashboardReducer,\n  post: postReducer,\n  category: category\n})\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(sagaMiddleware, routerMiddleware(history))\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n"]},"metadata":{},"sourceType":"module"}