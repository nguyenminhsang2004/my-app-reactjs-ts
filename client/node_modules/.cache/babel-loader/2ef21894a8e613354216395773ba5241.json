{"ast":null,"code":"import axios from \"axios\";\nimport queryString from 'query-string';\nconst axiosClient = axios.create({\n  baseURL: 'http://localhost:5000',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  paramsSerializer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(function (config) {\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosClient.interceptors.response.use(function (response) {\n  return response.data;\n}, function (error) {\n  return Promise.reject(error);\n});\nexport default axiosClient;","map":{"version":3,"sources":["D:/REACTJS/APP/client/src/api/axiosClient.ts"],"names":["axios","queryString","axiosClient","create","baseURL","headers","paramsSerializer","params","stringify","interceptors","request","use","config","error","Promise","reject","response","data"],"mappings":"AAAA,OAAOA,KAAP,MAAyD,OAAzD;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC7BC,EAAAA,OAAO,EAAC,uBADqB;AAE7BC,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFoB;AAK7BC,EAAAA,gBAAgB,EAAEC,MAAM,IAAIN,WAAW,CAACO,SAAZ,CAAsBD,MAAtB;AALC,CAAb,CAApB;AAQAL,WAAW,CAACO,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,UAAUC,MAAV,EAAsC;AACvE,SAAOA,MAAP;AACD,CAFH,EAEK,UAAUC,KAAV,EAAiB;AAClB,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAJD;AAMAX,WAAW,CAACO,YAAZ,CAAyBO,QAAzB,CAAkCL,GAAlC,CAAsC,UAAUK,QAAV,EAAmC;AACrE,SAAOA,QAAQ,CAACC,IAAhB;AACD,CAFH,EAEK,UAAUJ,KAAV,EAAiB;AAClB,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CAJD;AAMA,eAAeX,WAAf","sourcesContent":["import axios, { AxiosRequestConfig, AxiosResponse } from \"axios\";\r\nimport queryString from 'query-string';\r\n\r\nconst axiosClient = axios.create({\r\n    baseURL:'http://localhost:5000',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    paramsSerializer: params => queryString.stringify(params),\r\n});\r\n\r\naxiosClient.interceptors.request.use(function (config: AxiosRequestConfig) {\r\n    return config;\r\n  }, function (error) {\r\n    return Promise.reject(error);\r\n});\r\n\r\naxiosClient.interceptors.response.use(function (response: AxiosResponse) {\r\n    return response.data;\r\n  }, function (error) {\r\n    return Promise.reject(error);\r\n});\r\n\r\nexport default axiosClient;"]},"metadata":{},"sourceType":"module"}