{"ast":null,"code":"var _jsxFileName = \"D:\\\\REACTJS\\\\APP\\\\client\\\\src\\\\features\\\\note\\\\components\\\\NoteForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { Box, Button, CircularProgress, makeStyles } from '@material-ui/core';\nimport { Alert } from '@material-ui/lab';\nimport { DateTimePickerField, InputField } from 'components/FormFields';\nimport React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport * as yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  title: yup.string().required('Please enter title !!!'),\n  content: yup.string().required('Please enter content !!!'),\n  completedAt: yup.da\n});\nconst useStyles = makeStyles(theme => ({\n  title: {\n    textAlign: 'center',\n    textTransform: 'uppercase'\n  },\n  button: {\n    textAlign: 'center',\n    marginTop: theme.spacing(3)\n  }\n}));\nexport default function PostForm({\n  initialValue,\n  onSubmit\n}) {\n  _s();\n\n  const classes = useStyles();\n  const [error, setError] = useState('');\n  const {\n    control,\n    handleSubmit,\n    formState: {\n      isSubmitting\n    }\n  } = useForm({\n    defaultValues: initialValue,\n    resolver: yupResolver(schema)\n  });\n\n  const handleSubmitForm = async formValue => {\n    try {\n      setError('');\n      await (onSubmit === null || onSubmit === void 0 ? void 0 : onSubmit(formValue));\n    } catch (error) {\n      console.log(error);\n      setError('Create post failed.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    width: 600,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(handleSubmitForm),\n      children: [/*#__PURE__*/_jsxDEV(InputField, {\n        name: \"title\",\n        control: control,\n        label: \"Title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputField, {\n        name: \"content\",\n        control: control,\n        label: \"Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DateTimePickerField, {\n        name: \"completedAt\",\n        control: control,\n        label: \"Completed Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.button,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          size: \"large\",\n          type: \"submit\",\n          variant: \"contained\",\n          color: \"primary\",\n          disabled: isSubmitting,\n          children: [isSubmitting && /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 20,\n            color: \"primary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 30\n          }, this), \" Save\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PostForm, \"vE6Ch0NDXOEbo5hc88G0idau8Lo=\", false, function () {\n  return [useStyles, useForm];\n});\n\n_c = PostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["D:/REACTJS/APP/client/src/features/note/components/NoteForm.tsx"],"names":["yupResolver","Box","Button","CircularProgress","makeStyles","Alert","DateTimePickerField","InputField","React","useState","useForm","yup","schema","object","shape","title","string","required","content","completedAt","da","useStyles","theme","textAlign","textTransform","button","marginTop","spacing","PostForm","initialValue","onSubmit","classes","error","setError","control","handleSubmit","formState","isSubmitting","defaultValues","resolver","handleSubmitForm","formValue","console","log"],"mappings":"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","sourcesContent":["import { yupResolver } from '@hookform/resolvers/yup'\r\nimport { Box, Button, CircularProgress, makeStyles } from '@material-ui/core'\r\nimport { Alert } from '@material-ui/lab'\r\nimport { DateTimePickerField, InputField } from 'components/FormFields'\r\nimport { Note } from 'models'\r\nimport React, { useState } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport * as yup from 'yup'\r\n\r\nconst schema = yup.object().shape({\r\n  title: yup.string().required('Please enter title !!!'),\r\n  content: yup.string().required('Please enter content !!!'),\r\n  completedAt: yup.da\r\n})\r\n\r\nexport interface NoteFormProps {\r\n  initialValue: Note\r\n  onSubmit: (formValue: Note) => void\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  title: {\r\n    textAlign: 'center',\r\n    textTransform: 'uppercase',\r\n  },\r\n  button: {\r\n    textAlign: 'center',\r\n    marginTop: theme.spacing(3),\r\n  },\r\n}))\r\n\r\nexport default function PostForm({ initialValue, onSubmit }: NoteFormProps) {\r\n  const classes = useStyles()\r\n\r\n  const [error, setError] = useState<string>('')\r\n\r\n  const {\r\n    control,\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = useForm<Note>({\r\n    defaultValues: initialValue,\r\n    resolver: yupResolver(schema),\r\n  })\r\n\r\n  const handleSubmitForm = async (formValue: Note) => {\r\n    try {\r\n      setError('')\r\n      await onSubmit?.(formValue)\r\n    } catch (error) {\r\n      console.log(error)\r\n      setError('Create post failed.')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Box width={600}>\r\n      <form onSubmit={handleSubmit(handleSubmitForm)}>\r\n        <InputField name=\"title\" control={control} label=\"Title\" />\r\n        <InputField name=\"content\" control={control} label=\"Content\" />\r\n        <DateTimePickerField name=\"completedAt\" control={control} label=\"Completed Date\" />\r\n\r\n        {error && <Alert severity=\"error\">{error}</Alert>}\r\n\r\n        <Box className={classes.button}>\r\n          <Button\r\n            size=\"large\"\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={isSubmitting}\r\n          >\r\n            {isSubmitting && <CircularProgress size={20} color=\"primary\" />} Save\r\n          </Button>\r\n        </Box>\r\n      </form>\r\n    </Box>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}