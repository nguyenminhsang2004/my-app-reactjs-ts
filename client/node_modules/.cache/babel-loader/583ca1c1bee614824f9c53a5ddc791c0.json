{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isLogged: false,\n  logging: false,\n  registering: false,\n  currentUser: undefined\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    register(state, action) {\n      state.registering = true;\n    },\n\n    registerSuccess(state, action) {\n      state.registering = false;\n      state.isLogged = true;\n      state.currentUser = action.payload;\n    },\n\n    registerFailed(state, action) {\n      state.registering = false;\n    },\n\n    login(state, action) {\n      state.logging = true;\n    },\n\n    loginSuccess(state, action) {\n      state.logging = false;\n      state.isLogged = true;\n      state.currentUser = action.payload;\n    },\n\n    loginFailed(state, action) {\n      state.logging = false;\n    },\n\n    logout(state) {\n      state.isLogged = false;\n      state.currentUser = undefined;\n    }\n\n  }\n}); // Actions\n\nexport const authActions = authSlice.actions; // Selectors\n\nexport const selectIsLogged = state => state.auth.isLogged;\nexport const selectLogging = state => state.auth.logging;\nexport const selectCurrentUser = state => state.auth.currentUser;\nexport const selectRegistering = state => state.auth.registering; // Reducers\n\nconst authReducer = authSlice.reducer;\nexport default authReducer;","map":{"version":3,"sources":["D:/REACTJS/APP/client/src/features/auth/authSlice.ts"],"names":["createSlice","initialState","isLogged","logging","registering","currentUser","undefined","authSlice","name","reducers","register","state","action","registerSuccess","payload","registerFailed","login","loginSuccess","loginFailed","logout","authActions","actions","selectIsLogged","auth","selectLogging","selectCurrentUser","selectRegistering","authReducer","reducer"],"mappings":"AACA,SAASA,WAAT,QAA2C,kBAA3C;AAWA,MAAMC,YAAuB,GAAG;AAC5BC,EAAAA,QAAQ,EAAE,KADkB;AAE5BC,EAAAA,OAAO,EAAE,KAFmB;AAG5BC,EAAAA,WAAW,EAAE,KAHe;AAI5BC,EAAAA,WAAW,EAAEC;AAJe,CAAhC;AAOA,MAAMC,SAAS,GAAGP,WAAW,CAAC;AAC1BQ,EAAAA,IAAI,EAAE,MADoB;AAE1BP,EAAAA,YAF0B;AAG1BQ,EAAAA,QAAQ,EAAE;AACNC,IAAAA,QAAQ,CAACC,KAAD,EAAQC,MAAR,EAAoC;AACxCD,MAAAA,KAAK,CAACP,WAAN,GAAoB,IAApB;AACH,KAHK;;AAINS,IAAAA,eAAe,CAACF,KAAD,EAAQC,MAAR,EAAoC;AAC/CD,MAAAA,KAAK,CAACP,WAAN,GAAoB,KAApB;AACAO,MAAAA,KAAK,CAACT,QAAN,GAAiB,IAAjB;AACAS,MAAAA,KAAK,CAACN,WAAN,GAAoBO,MAAM,CAACE,OAA3B;AACH,KARK;;AASNC,IAAAA,cAAc,CAACJ,KAAD,EAAQC,MAAR,EAAsC;AAChDD,MAAAA,KAAK,CAACP,WAAN,GAAoB,KAApB;AACH,KAXK;;AAYNY,IAAAA,KAAK,CAACL,KAAD,EAAQC,MAAR,EAA4C;AAC7CD,MAAAA,KAAK,CAACR,OAAN,GAAgB,IAAhB;AACH,KAdK;;AAeNc,IAAAA,YAAY,CAACN,KAAD,EAAQC,MAAR,EAAoC;AAC5CD,MAAAA,KAAK,CAACR,OAAN,GAAgB,KAAhB;AACAQ,MAAAA,KAAK,CAACT,QAAN,GAAiB,IAAjB;AACAS,MAAAA,KAAK,CAACN,WAAN,GAAoBO,MAAM,CAACE,OAA3B;AACH,KAnBK;;AAoBNI,IAAAA,WAAW,CAACP,KAAD,EAAQC,MAAR,EAAsC;AAC7CD,MAAAA,KAAK,CAACR,OAAN,GAAgB,KAAhB;AACH,KAtBK;;AAuBNgB,IAAAA,MAAM,CAACR,KAAD,EAAO;AACTA,MAAAA,KAAK,CAACT,QAAN,GAAiB,KAAjB;AACAS,MAAAA,KAAK,CAACN,WAAN,GAAoBC,SAApB;AACH;;AA1BK;AAHgB,CAAD,CAA7B,C,CAkCA;;AACA,OAAO,MAAMc,WAAW,GAAGb,SAAS,CAACc,OAA9B,C,CAEP;;AACA,OAAO,MAAMC,cAAc,GAAIX,KAAD,IAAsBA,KAAK,CAACY,IAAN,CAAWrB,QAAxD;AACP,OAAO,MAAMsB,aAAa,GAAIb,KAAD,IAAsBA,KAAK,CAACY,IAAN,CAAWpB,OAAvD;AACP,OAAO,MAAMsB,iBAAiB,GAAId,KAAD,IAAsBA,KAAK,CAACY,IAAN,CAAWlB,WAA3D;AACP,OAAO,MAAMqB,iBAAiB,GAAIf,KAAD,IAAsBA,KAAK,CAACY,IAAN,CAAWnB,WAA3D,C,CAEP;;AACA,MAAMuB,WAAW,GAAGpB,SAAS,CAACqB,OAA9B;AACA,eAAeD,WAAf","sourcesContent":["import { LoginPayLoad } from 'models/common';\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"app/store\";\r\nimport { User } from \"models/user\";\r\n\r\nexport interface AuthState {\r\n    isLogged: boolean;\r\n    logging?: boolean;\r\n    registering: boolean;\r\n    currentUser?: User\r\n}\r\n\r\nconst initialState: AuthState = {\r\n    isLogged: false,\r\n    logging: false,\r\n    registering: false,\r\n    currentUser: undefined,\r\n}\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        register(state, action: PayloadAction<User>){\r\n            state.registering = true;\r\n        },\r\n        registerSuccess(state, action: PayloadAction<User>){\r\n            state.registering = false;\r\n            state.isLogged = true;\r\n            state.currentUser = action.payload;\r\n        },\r\n        registerFailed(state, action: PayloadAction<string>){\r\n            state.registering = false;\r\n        },\r\n        login(state, action: PayloadAction<LoginPayLoad>){\r\n            state.logging = true;\r\n        },\r\n        loginSuccess(state, action: PayloadAction<User>){\r\n            state.logging = false;\r\n            state.isLogged = true;\r\n            state.currentUser = action.payload;\r\n        },\r\n        loginFailed(state, action: PayloadAction<string>){\r\n            state.logging = false;\r\n        },\r\n        logout(state){\r\n            state.isLogged = false;\r\n            state.currentUser = undefined;\r\n        },\r\n    }\r\n});\r\n\r\n\r\n// Actions\r\nexport const authActions = authSlice.actions;\r\n\r\n// Selectors\r\nexport const selectIsLogged = (state: RootState) => state.auth.isLogged;\r\nexport const selectLogging = (state: RootState) => state.auth.logging;\r\nexport const selectCurrentUser = (state: RootState) => state.auth.currentUser;\r\nexport const selectRegistering = (state: RootState) => state.auth.registering;\r\n\r\n// Reducers\r\nconst authReducer = authSlice.reducer;\r\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}